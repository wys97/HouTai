<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="../../js/vuejs/2.6.10/vue.js"></script>
    <script src="../../js/axios.min.js"></script>
    <link rel="stylesheet" href="../../css/elementUI.css">
    <link rel="stylesheet" href="../../css/newstyle.css">
    <script src="../../js/elemenyUI.js"></script>
    <!-- 引入组件库 -->
    <script src="../../js/constant.js"></script>
    <script type="text/javascript" src="../../js/libs/jquery-3.3.1.min.js"></script>
    <script type="text/javascript" src="../../js/common.js"></script>
</head>
<style>
    .margin {
        margin: 10px 0 10px 10px;
    }

    * {
        margin: 0;
        padding: 0;
    }
    .title{
        margin-left: 30px
    }

    .color{
        color: #606266;
    }
    .tip{
        width: 20px;
        height: 20px;
        color:white;
        display: inline-block;
        background:black;
        border-radius: 50%;
        text-align: center;
        line-height: 20px
    }
    [v-cloak]{
        opacity: 0;
    }
</style>

<body>
    <div id="app" v-cloak>
        <el-form ref="form" :model="form" label-width="110px" style="display: inline-block">
            <h4 class="title">基本信息</h4>
            <el-form-item label="姓名">
                <el-input v-model="form.userName" disabled></el-input>
            </el-form-item>
            <el-form-item label="角色">
                <el-select v-model="form.roleName"  ref="role" placeholder="请选择角色" value-key="roleId"
                    @change="changeRole">
                    <el-option v-for="item in roleList" :key="item.roleId" :label="item.roleName" :value="item">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="职能描述">
                <el-input type="textarea" :autosize="{ minRows: 3, maxRows: 4}" placeholder="请输入职能描述"
                    v-model="form.remark"></el-input>
            </el-form-item>
            <h4 class="title">账号信息</h4>
            <el-form-item label="账号">
                <el-input disabled v-model="form.phoneNo" maxlength="11" placeholder="请输入手机号"></el-input>
            </el-form-item>
            <el-form-item label="默认密码">
                <el-input  v-model="form.password" maxlength="6" placeholder="请输入密码"></el-input>
            </el-form-item>
            <el-form-item label="管理范围">
                <div v-if="displayAdministration.length > 0" style="border: 1px solid #e3e3e3;padding-left: 10px;">
                    <div class="color" v-for="(item,i) in displayAdministration">
                        <p> {{item.cityName}}/
                            <span v-if="item.storeName.length > 0">{{item.storeName.join()}}</span>
                            <span v-else-if="item.storeName.length == 0">全部</span>
                            <el-button size="mini" @click="del(i)" circle icon="el-icon-delete"></el-button>
                        </p>
                    </div>
                </div>
                <el-select style="margin-top: 20px" ref="citySelect" v-model="city" clearable filterable
                    placeholder="请选择城市" @change="changeCity">
                    <el-option v-for="(item, index) in cityList" :key="item.codeC" :label="item.cityName" :value="item.codeC"></el-option>
                </el-select>
                <el-select style="margin-top: 20px" ref="storeSelect" v-model="storeId" style="width:400px"
                    multiple clearable filterable placeholder="请选择门店">
                    <el-option v-for="(item, index) in storeList" :key="item.storeId" :label="item.storeName" :value="item.storeId"></el-option>
                </el-select>
                <el-button @click="add()">添加</el-button>
                <el-tooltip class="item" effect="dark" content="仅选择城市添加管理范围，该账号将能管理该城市所有门店，包括新添加门店；
                选择部分门店添加管理范围，该账号将仅能管理选择门店；" placement="top-start">
                <span class="tip">  ?  </span>
                </el-tooltip>
            </el-form-item>
            <el-form-item label="">
                <el-button type="primary" @click="sub">提交</el-button>
                <el-button @click="back">返回</el-button>
            </el-form-item>
        </el-form>
    </div>
</body>
<script>
    new Vue({
        el: "#app",
        data() {
            return {
                displayAdministration: [],
                storeList: [],
                cityList: [],
                roleList: [], //角色数据列表
                form: {},
                city:"",
                storeId:[]
            }
        },
        methods: {
            sub() {
                if(this.displayAdministration.length == []){
                    this.$message.error("请选择管理范围");
                    return
                }
                let clickAllCityCode = [];
                let clickAllCityName = [];
                let storeId = [];
                let foodStoreName = [];
                let partCityCode = [];
                let partCityName = [];
                this.displayAdministration.map(val => {
                    if (val.storeId.length > 0) {
                        storeId.push(val.storeId.join());
                        foodStoreName.push(val.storeName.join());
                        partCityCode.push(val.cityId);
                        partCityName.push(val.cityName);
                    } else if (val.storeId.length == 0) {
                        clickAllCityCode.push(val.cityId);
                        clickAllCityName.push(val.cityName);
                    }
                })
                let data = {
                    id: GetRequest().userId,
                    userName: this.form.userName, //用户名
                    roleId: this.form.roleId, //角色ID
                    type: this.form.type, //角色类型--后台or app
                    roleName: this.form.roleName, //角色名
                    remark: this.form.remark, //描述
                    phoneNo: this.form.phoneNo, //账号
                    password: this.form.password, //密码
                    operatorId: sessionStorage.ID,
                    userId: sessionStorage.ID,
                    clickAllCityCode: clickAllCityCode.join(),
                    clickAllCityName: clickAllCityName.join(),
                    storeId: storeId.join(),
                    foodStoreName: foodStoreName.join(),
                    partCityCode: partCityCode.join(),
                    partCityName: partCityName.join(),
                }
                axios({
                        method: 'post',
                        url: pageUrl + userPackageName + "/backend_user/editUser",
                        params: data
                    })
                    .then((res) => {
                        if (res.data.code == 000000) {
                            this.$message({
                                message: '修改成功',
                                type: 'success'
                            });
                            window.location.href = "./platformUserList.html"
                        } else {
                            this.$message.error(res.data.message);
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            },

            //返回
            back() {
                window.location.href = './platformUserList.html'
            },

            del(i){
                this.displayAdministration.splice(i,1)
            },

            //角色改变时的数据
            changeRole(val) {
                this.displayAdministration = [];
                this.form.type = val.isApp;
                this.form.roleName = val.roleName;
                this.form.roleId = val.roleId;
            },

            //请求城市数据
            getProvince() {
                axios({ 
                    method: 'get',
                    url: pageUrl + userPackageName + "/backend_user/getAllOpenCityByProvince",
                })
                .then((response) => {
                    console.log(response);
                    this.cityList = response.data.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
            },

            //市改变时请求门店
            changeCity(e) {
                this.form.storeId = "";
                this.form.storeList = "";

                axios({
                    method: 'get',
                    url: pageUrl + userPackageName + `/backend_user/getAllStoreByCity?codeC=${e}`,
                })
                .then((response) => {
                    console.log(response);
                    this.storeList = response.data.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
            },

            //门店的数据
            changeStore(val) {
                this.foodStoreName = val.storeName;
                this.storeId = val.storeId;
            },

            getUserList() {
                axios({
                        method: 'get',
                        url: pageUrl + userPackageName + '/backend_user/getAllRoleList',
                        params: {
                            userId: sessionStorage.ID
                        }
                    })
                    .then((res) => {
                        this.roleList = res.data.data;
                    })
                    .catch(function (error) {
                        //console.log(error);
                    });
            },

            add() {
                if(this.city == ""){
                    return
                }
                if(this.form.roleId == 2 && (this.city != "" && this.storeId == "")){
                    this.$message.error("该角色，必须添加管理门店");
                    return
                }
                //长度不等于选择的是  部分门店
                // if (this.$refs.storeSelect.selected.length !== this.$refs.storeSelect.options.length) {
                    if (this.displayAdministration.length === 0) {
                        //长度为0直接添加
                        let obj = {
                            cityName: "",
                            storeName: [],
                            cityId: "",
                            storeId: []
                        };
                        obj.cityName = this.$refs.citySelect.query;
                        obj.cityId = this.$refs.citySelect.value;
                        this.$refs.storeSelect.selected.map(val => {
                            obj.storeName.push(val.currentLabel);
                            obj.storeId.push(val.value);
                        })
                        this.displayAdministration.push(obj);
                    }
                    //长度不为0的时候进行判断   监测数据中是否有重复
                    else if (this.displayAdministration.length != 0) {
                        //获取下标是否为-1 或下标
                        let index = this.displayAdministration.findIndex((val, i) => {
                            return val.cityName == this.$refs.citySelect.query
                        })
                        //如果找不到下标正常添加
                        if (index === -1) {
                            let obj = {
                                cityName: "",
                                storeName: [],
                                cityId: "",
                                storeId: []
                            };
                            obj.cityName = this.$refs.citySelect.query;
                            obj.cityId = this.$refs.citySelect.value;
                            this.$refs.storeSelect.selected.map(val => {
                                obj.storeName.push(val.currentLabel);
                                obj.storeId.push(val.value);
                            })
                            this.displayAdministration.push(obj);
                        }
                        //如果找到下标就进行替换数据
                        else if (index !== -1) {
                            let obj = {
                                cityName: "",
                                storeName: [],
                                cityId: "",
                                storeId: []
                            };
                            obj.cityName = this.$refs.citySelect.query;
                            obj.cityId = this.$refs.citySelect.value;
                            this.$refs.storeSelect.selected.map(val => {
                                obj.storeName.push(val.currentLabel);
                                obj.storeId.push(val.value);
                            })
                            this.displayAdministration.splice(index, 1, obj);
                        }
                    }
                // }
                // 如果长度相等  就选择的是全部门店
                // else if (this.$refs.storeSelect.selected.length === this.$refs.storeSelect.options.length) {
                //     let index = this.displayAdministration.findIndex((val, i) => {
                //         return val.cityName == this.$refs.citySelect.query
                //     })
                //     if (index === -1) {
                //         let obj = {
                //             cityName: "",
                //             storeName: [],
                //             cityId: "",
                //             storeId: []
                //         };
                //         obj.cityName = this.$refs.citySelect.query;
                //         obj.cityId = this.$refs.citySelect.value;
                //         obj.storeId = [];
                //         obj.storeName = []
                //         this.displayAdministration.push(obj);
                //     } else if (index !== -1) {
                //         let obj = {
                //             cityName: "",
                //             storeName: [],
                //             cityId: "",
                //             storeId: []
                //         };
                //         obj.cityName = this.$refs.citySelect.query;
                //         obj.cityId = this.$refs.citySelect.value;
                //         obj.storeId = [];
                //         obj.storeName = [];
                //         this.displayAdministration.splice(index, 1, obj);
                //     }

                // }
                this.storeId = "";
                this.city = "";
                this.storeList = []
            },

        },

        created() {
            this.getUserList();
            this.getProvince();
            axios({
                    method: 'post',
                    url: pageUrl + userPackageName + "/backend_user/queryUserDetail",
                    params: {
                        userId: GetRequest().userId
                    }
                })
                .then((res) => {
                    this.form = res.data.data;
                    let arr = [];

                    if (this.form.partCityList !== null && this.form.partCityList.length > 0) {
                        this.form.partCityList.map(val1 => {
                            let obj = {
                                cityName: "",
                                storeName: [],
                                cityId: "",
                                storeId: []
                            };
                            obj.cityName = val1.cityName;
                            obj.cityId = val1.codeC;
                            val1.storeList.map(val2 => {
                                obj.storeName.push(val2.storeName)
                                obj.storeId.push(val2.storeId)
                            })
                            arr.push(obj)
                        })
                    }
                    if (this.form.clickAllCityName !== null && this.form.clickAllCityName.length > 0) {
                        let cityNameAll = this.form.clickAllCityName.split(",");
                        let cityIdAll = this.form.clickAllCityCode.split(",");
                        cityNameAll.forEach((el,i) => {
                            let obj = {
                                cityName: "",
                                storeName: [],
                                cityId: "",
                                storeId: []
                            };
                            obj.cityName = el;
                            obj.cityId = cityIdAll[i];
                            arr.push(obj)
                        });
                    }
                    this.displayAdministration = arr;

                })
                .catch(function (error) {
                    console.log(error);
                });
        },

    })
</script>

</html>