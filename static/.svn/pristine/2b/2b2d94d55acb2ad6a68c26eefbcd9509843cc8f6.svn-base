<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<!-- 引入样式 -->
<link rel="stylesheet" href="../../css/elementUI.css">
<script src="../../js/vuejs/2.6.10/vue.js"></script>
<!-- 引入组件库 -->
<script src="../../js/elemenyUI.js"></script>
<script src="../../js/constant.js"></script>
<script type="text/javascript" src="../../js/libs/jquery-3.3.1.min.js"></script>
<script src="../../js/axios.min.js"></script>
<script src="../../js/common.js"></script>

<style>
    [v-cloak] {
        opacity: 0;
    }

    .disabled .el-upload--picture-card {
        display: none;
    }


    .font {
        font-size: 0.28rem;
        color: #606266;
    }

    .btn {
        position: relative;
        left: 0.2rem;
        top: 0.1rem;
        cursor: pointer;
    }


    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
    }
    input[type="number"]{
      -moz-appearance: textfield;
    }

    .el-select .el-input {
        width: 300px;
    }

    .title .el-button:hover{
        background-color: #1aa094;
        color: #fff;
        border-color: #1aa094;
    }
</style>

<body>
    <div id="app" v-cloak>
        <p class="title">
            <span>城市：{{cityName}}</span>
            <span>门店：{{storeName}}</span>
            <el-button @click="addDishesFlag = true">添加</el-button>
            <el-button @click="back">返回</el-button>
        </p>
        <el-table style="width: 100%" :data="tableData" style="width: 100%;margin-bottom: 0.4rem;" border row-key="id">
            <el-table-column prop="dishName" align="center" label="菜品名称"></el-table-column>
            <el-table-column prop="dishesRemake" align="center" label="菜品描述"></el-table-column>
            <el-table-column prop="state" align="center" label="菜品大图">
                <template scope="scope"> <img :src="scope.row.dishesUrl" width="150" height="100" class="head_pic" /></template>
            </el-table-column>
            <el-table-column prop="original_price" align="center" label="菜品原价"></el-table-column>
            <el-table-column prop="special_price" align="center" label="菜品特价"></el-table-column>
            <el-table-column prop="app_special_price" align="center" label="APP特价"></el-table-column>
            <el-table-column prop="is_del" align="center" label="售卖状态"></el-table-column>
            <el-table-column prop="" align="center" label="操作">
                <template slot-scope="scope">
                    <el-button type="text" @click="edit(scope.row)">编辑</el-button>
                    <el-button type="text" v-if="scope.row.is_del == '售卖中'" style="color: red" @click="temporarily(scope.row)">停售</el-button>
                    <el-button type="text" v-if="scope.row.is_del == '已停售'" @click="openSell(scope.row)">启售</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-pagination background layout="prev, pager, next" :total="total" @current-change="change"></el-pagination>
        <!-- 编辑弹框 -->
        <el-dialog title="编辑菜品" :visible.sync="editDishesFlag">
            <el-form :model="editData" :rules="editRules" ref="editData" label-width="100px" style="display: inline-block">
                <el-form-item label="菜品名称" prop="dishesName">
                    <el-input disabled v-model="editData.dishesName"></el-input>
                </el-form-item>
                <el-form-item label="菜品类型" prop="type">
                    <el-select v-model="editData.type" placeholder="请选择">
                        <el-option v-for="item in options" :key="item.value" :label="item.label" :value="item.value">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="菜品描述" prop="dishesRemake">
                    <el-input type="textarea" autosize placeholder="请输入菜品描述" v-model="editData.dishesRemake"></el-input>
                </el-form-item>
                <el-form-item label="菜品价格" prop="originalPrice">
                    <el-input v-model="editData.originalPrice" oninput="if(value.length>5)value=value.slice(0,5)">
                        <template slot="append">
                            元
                        </template>
                    </el-input>
                </el-form-item>
                <el-form-item label="菜品特价" prop="specialPrice">
                    <el-input clearable v-model="editData.specialPrice" oninput="if(value.length>5)value=value.slice(0,5)">
                        <template slot="append">
                            元
                        </template></el-input>
                </el-form-item>
                <el-form-item label="APP特价" prop="appSpecialPrice">
                    <el-input clearable v-model="editData.appSpecialPrice" oninput="if(value.length>5)value=value.slice(0,5)">
                        <template slot="append">
                            元
                        </template></el-input>
                </el-form-item>
                <el-form-item label="商品大图" prop="dishesUrl" ref="editDishesImgRule">
                    <el-upload :action="imgUploadUrl" :limit="1" ref="editDishesImg" :file-list="editData.bigImg" :on-exceed="addDishesImgLimit" list-type="picture-card" :on-success="editDishesImgSuccess">
                        <i class="el-icon-plus"></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label="菜品详情图" prop="dishesDetailsImg" ref="editDishesDetailImgRule">
                    <el-upload :action="imgUploadUrl" :limit="4" ref="editDishesDetailImg" :file-list="editData.files"  :on-exceed="addMenuDetailImgLimit" list-type="picture-card" :before-upload="beforeUpload" :on-success="editDishesDetailImgSuccess">                        <i class="el-icon-plus"></i>
                    </el-upload>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" @click="editSub('editData')">提交</el-button>
                    <el-button @click="cancel">取消</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
        <!-- 添加菜品弹框 -->
        <el-dialog title="菜品添加" :visible.sync="addDishesFlag">
            <el-form :model="addData" :rules="addRules" ref="addData" label-width="100px" style="display: inline-block">
                <el-form-item label="菜品名称" prop="dishesName">
                    <el-input clearable v-model="addData.dishesName"></el-input>
                </el-form-item>
                <el-form-item label="菜品类型" prop="type">
                    <el-select v-model="addData.type" placeholder="请选择">
                        <el-option v-for="item in options" :key="item.value" :label="item.label" :value="item.value">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="菜品描述" prop="dishesRemake">
                    <el-input type="textarea" autosize placeholder="请输入菜品描述" v-model="addData.dishesRemake"></el-input>
                </el-form-item>
                <el-form-item label="菜品价格" prop="originalPrice">
                    <el-input v-model="addData.originalPrice" oninput="if(value.length>5)value=value.slice(0,5)">
                        <template slot="append">元</template>
                    </el-input>
                </el-form-item>
                <el-form-item label="菜品特价" prop="specialPrice">
                    <el-input v-model="addData.specialPrice" oninput="if(value.length>5)value=value.slice(0,5)">
                        <template slot="append">元</template>
                    </el-input>
                </el-form-item>
                <el-form-item label="APP特价" prop="appSpecialPrice">
                    <el-input v-model="addData.appSpecialPrice" oninput="if(value.length>5)value=value.slice(0,5)">
                        <template slot="append">元</template>
                    </el-input>
                </el-form-item>
                <el-form-item label="菜品大图" prop="dishesUrl" ref='addUpload1'>
                    <el-upload :action="imgUploadUrl" :limit=1 ref="addDishesUrl" :on-success="addDishesImgSuccess" :on-exceed="addDishesImgLimit" :before-upload="beforeUpload"  list-type="picture-card">
                        <i class="el-icon-plus"></i>
                    </el-upload>
                </el-form-item>
                <el-form-item label="菜品详情图"  prop="dishesDetailsImg" ref='addUpload2'>
                    <el-upload multiple ref="image" :limit=4 :action="imgUploadUrl" list-type="picture-card" :before-upload="beforeUpload" :on-exceed="addMenuDetailImgLimit" :on-success="addMenuDetailImgSuccess">
                        <i class="el-icon-plus"></i>
                    </el-upload>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" :loading="addLoading" @click="addSub('addData')">提交</el-button>
                    <el-button @click="cancel">取消</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
    </div>
</body>
<script>
    new Vue({
        el: '#app',
        data(){
            //原价校验
            let checkOriginalPrice = (rule, value, callback) => {
                if(!value) {
                    callback(new Error('请填写正确的菜品价格'))
                } else if(/^ +$/gi.test(value)) {
                    callback(new Error('菜品价格不能为纯空格'))
                } else if(!/^[0-9]+([.]\d{1,2})?$/.test(value) || value == 0) {
                    callback(new Error('请填写正确的菜品价格'))
                } else {
                    callback();
                }
            }
            //校验 非必选金额
            let checkAppPrice = (rule, value, callback) => {
                if(!value) {
                    callback();
                } else if(!/^[0-9]+([.]\d{1,2})?$/.test(value)) {
                    callback(new Error('请填写正确的菜品价格'))
                } else {
                    callback();
                }
            }
            //编辑   校验商品大图
            let checkEditDishesImg = (rule, value, callback) => {
                if(this.$refs.editDishesImg.uploadFiles.length == 0) {
                    callback(new Error('请选择商品大图'))
                }else{
                    callback();
                }
            }

            //编辑    校验商品详情图片上传
            let checkEditDishesDetailImg1 = (rule, value, callback) => {
                if(this.$refs.editDishesDetailImg.uploadFiles.length == 0) {
                    callback(new Error('请选择商品详情图'))
                }else{
                    callback();
                }
            }

            //添加  校验商品大图
            let checkAddDishesImg = (rule, value, callback) => {
                if(this.$refs.addDishesUrl.uploadFiles.length == 0) {
                    callback(new Error('请选择商品大图'))
                }else{
                    callback();
                }
            }
            //添加    校验商品详情图片上传
            let checkAddDishesDetailImg = (rule, value, callback) => {
                if(this.$refs.image.uploadFiles.length == 0) {
                    callback(new Error('请选择商品详情图'))
                }else{
                    callback();
                }
            }
           return{
            addLoading:false,
            backData:{
                state:"",
                codec:"",
                store:""
            },
            files:[],
            codec: "",
            store: "",
            cityName: "",
            storeName: "",
            imgUploadUrl: `${pageUrl}${userPackageName}/fileInfo/wangEditorFileUpload`,
            tableData: [],
            options: [{value: '1',label: '菜品'}, {value: '2',label: '米饭'}, {value: '3',label: '食杂'}],
            addDishesFlag: false,
            editDishesFlag: false,
            addData: {
                type: "1",
                dishesName: "",
                dishesRemake: "",
                originalPrice: "",
                specialPrice: "",
                appSpecialPrice: "",
                dishesUrl: "",
                dishesDetailsImg: "",
                isDel: 1,
                storeId: "",
                userId: sessionStorage.ID,
            },
            editData: {
                id:"",
                type: "",
                dishesName: "",
                dishesRemake: "",
                originalPrice: "",
                specialPrice: "",
                appSpecialPrice: "",
                dishesUrl: "",
                dishesDetailsImg: "",
                isDel: "1",
                userId: sessionStorage.ID,
            },
            addRules: {
                dishesName: [{required: true,trigger: 'blur',message: '菜品名称不能为空'}],
                type: [{required: true,trigger: ['blur', 'change'],message: '菜品类型不能为空'}],
                dishesRemake: [{required: true,trigger: 'blur',message: '菜品描述不能为空'}],
                // originalPrice: [{required: true,trigger: 'blur',message: '请填写正确的商品价格'},],
                originalPrice: [{validator:checkOriginalPrice,required:true},],
                specialPrice: [{validator:checkAppPrice},],
                appSpecialPrice: [{validator:checkAppPrice},],
                dishesUrl: [{validator:checkAddDishesImg}],   
                dishesDetailsImg: [{validator:checkAddDishesDetailImg}],
            },
            editRules:{
                dishesName: [{required: true,trigger: 'blur',message: '菜品名称不能为空'}],
                type: [{required: true,trigger: ['blur', 'change'],message: '菜品类型不能为空'}],
                dishesRemake: [{required: true,trigger: 'blur',message: '菜品描述不能为空'}],
                // originalPrice: [{required: true,trigger: 'blur',message: '请填写正确的商品价格'},],
                originalPrice: [{validator:checkOriginalPrice,required:true},],
                specialPrice: [{validator:checkAppPrice,required:false},],
                appSpecialPrice: [{validator:checkAppPrice,required:false},],
                dishesUrl: [{validator:checkEditDishesImg}],   
                dishesDetailsImg: [{validator:checkEditDishesDetailImg1}],
            },
            pageIndex: 1,
            pageSize: 10,  
            total: 0,
           }
        },
        methods: {
            //编辑按钮
            edit(e) {
                this.editDishesFlag = true;
                axios({
                    method: 'get',
                    url: pageUrl + eatPackageName + `/dishesManager/queryFoodDetailById?id=${e.id}`,
                })
                .then((response) => {
                    let data = response.data;
                    data.bigImg = [{ name: "",url: ""}];
                    data.bigImg[0].name = "img1Name";
                    data.bigImg[0].url = data.dishesUrl;
                    let imgIdList = data.dishes_img.split(" ");
                    data.files.forEach((element,i) => {
                        element.id = imgIdList[i];
                    });
                    this.editData.id = data.id;
                    this.editData.dishesName = data.dishesName;
                    this.editData.dishesRemake = data.dishesRemake;
                    this.editData.type = data.type;
                    this.editData.isDel = data.isDel;
                    this.editData.originalPrice = data.originalPrice;
                    this.editData.specialPrice = data.specialPrice || "";
                    this.editData.appSpecialPrice = data.appSpecialPrice || "";
                    this.editData.dishesUrl = data.dishesUrl;
                    this.editData.dishesDetailsImg = data.dishesDetailsImg;
                    this.editData.files = data.files;
                    this.editData.bigImg = data.bigImg;
                })
                .catch(function (error) {
                    console.log(error);
                });
            },

                //编辑菜品菜单 提交按钮
            editSub(rulesDishes) {
            let storeImg = [];
            this.$refs.editDishesDetailImg.uploadFiles.map((val) =>{
                if(val.response){
                    storeImg.push(val.response.data.id);
                }else{
                    storeImg.push(val.id);
                }
            })
            let dishesUrl = [];
            this.$refs.editDishesImg.uploadFiles.map((val) =>{
                if(val.response){  
                    dishesUrl.push(val.response.data.src)
                }else{
                    dishesUrl.push(val.url)
                }
            })
            let data1 = {
                id: this.editData.id,
                dishesRemake: this.editData.dishesRemake,
                type: this.editData.type,
                isDel: this.editData.isDel,
                userId:sessionStorage.ID,
                dishesName: this.editData.dishesName,
                originalPrice:this.editData.originalPrice,
                specialPrice: this.editData.specialPrice || "",
                appSpecialPrice: this.editData.appSpecialPrice || "",
                dishesUrl: dishesUrl.join(" "),
                dishesDetailsImg: storeImg.join(" ")
            }
            this.$refs[rulesDishes].validate((valid) => {
                if (valid) { 
                    let data = {
                        id: this.editData.id,
                        dishesRemake: this.editData.dishesRemake,
                        type: this.editData.type,
                        isDel: this.editData.isDel,
                        userId:sessionStorage.ID,
                        dishesName: this.editData.dishesName,
                        originalPrice:this.editData.originalPrice,
                        specialPrice: this.editData.specialPrice || 0,
                        appSpecialPrice: this.editData.appSpecialPrice || 0,
                        dishesUrl: dishesUrl.join(" "),
                        dishesDetailsImg: storeImg.join(" ")
                    }
                    axios({
                        method: 'PUT',
                        url: pageUrl + eatPackageName + "/dishesManager/updateFoodInfo",
                        params:data
                    })
                    .then((response) => {
                        if (response.data.code == "000000") {
                            this.$alert('编辑成功', '提示', {
                                confirmButtonText: '确定',
                                callback: action => {
                                    this.editDishesFlag = false;
                                    this.getTableData();
                                }
                            });
                        } else {
                            this.$alert('编辑失败', '提示', {
                                confirmButtonText: '确定',
                                callback: action => {
                                    this.editDishesFlag = false;
                                }
                            });
                        }
                    })
                }
            });
        },

            //停售
            temporarily(e) {
                this.$confirm('确定将此菜品停售吗？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(() => {
                    axios({
                            method: 'POST',
                            url: pageUrl + eatPackageName + "/dishesManager/updateFoodInfo",
                            data: {
                                id: e.id,
                                // userId: 1,
                                userId:sessionStorage.ID,
                                isDel: 0
                            }
                        })
                        .then((response) => {
                            if (response.data.code === "000000") {
                                this.$message({
                                    showClose: true,
                                    message: "已此菜品已停售",
                                    type: 'success'
                                });
                                this.getTableData();
                            }
                        })
                }).catch(() => {

                });

            },

            //启售
            openSell(e) {
                this.$confirm('确定将此菜品启售吗？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                }).then(() => {
                    axios({
                        method: 'POST',
                        url: pageUrl + eatPackageName + "/dishesManager/updateFoodInfo",
                        data: {
                            id: e.id,
                            // userId: 1,
                            userId:sessionStorage.ID,
                            isDel: 1
                        }
                    })
                    .then((response) => {
                        if (response.data.code === "000000") {
                            this.$message({
                                showClose: true,
                                message: "已此菜品已启售",
                                type: 'success'
                            });
                            this.getTableData();
                        }
                    })
                }).catch(() => {
                    
                });
            },

            //确定添加
            addSub(rulesDishes) {
                let arr1 = [];
                this.$refs.addDishesUrl.uploadFiles.map((val) =>{
                    arr1.push(val.response.data.src)
                })
                this.addData.dishesUrl = arr1.join();
                let arr2 = [];
                this.$refs.image.uploadFiles.map((val) =>{
                    arr2.push(val.response.data.id)
                })
                this.addData.dishesDetailsImg = arr2.join(" ");
                this.$refs[rulesDishes].validate((valid) => {
                    if (valid) {
                        this.addLoading = true;
                        // if(this.addData.originalPrice == 0){
                        //     this.$message.error("商品原价不能为0");
                        //     return
                        // }
                        let data = Object.assign({},this.addData);
                        if(data.specialPrice == "")data.specialPrice = 0;
                        if(data.appSpecialPrice == "")data.appSpecialPrice = 0;
                        axios({
                            method: 'POST',
                            url: pageUrl + eatPackageName + "/dishesManager/insertDishes",
                            params:data
                        })
                            .then((response) => {
                                if (response.data.code === "000000") {
                                    this.addLoading = false;
                                    this.$alert('添加成功', '提示', {
                                        confirmButtonText: '确定',
                                        callback: action => {
                                            this.addDishesFlag = false;
                                            this.getTableData();
                                            this.$refs.addData.resetFields();
                                            this.$refs.addDishesUrl.clearFiles();
                                            this.$refs.image.clearFiles();
                                        }
                                    });
                                } else {
                                    this.addLoading = false;
                                    this.$message.error("提交失败");
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }
                });
            },


            //上传之前对图片进行验证
            beforeUpload(file) {
                const isJPG = file.type === "image/jpeg" || "image/png" || "image/jpg";
                const isLt1M = file.size / 1024 / 1024 < 1;
                if (!isJPG) {
                    this.$message.error('请传入JPEG、PNG、JPG格式图片!');
                }
                if (!isLt1M) {
                    this.$message.error('上传图片大小不能超过 1M!');
                }
                return isJPG && isLt1M;
            },

            addMenuDetailImgLimit(files, fileList) {
                if (files.length > 4) {
                    this.$message.error("最多只能上传四张图片")
                }
                if (fileList.length >= 4) {
                    this.$message.error("最多只能上传四张图片")
                }
            },

            //商品大图超出数量的限制    
            addDishesImgLimit(files, fileList){
                if (files.length > 1) {
                    this.$message.error("商品大图最多只能上传一张图片")
                }
                if (fileList.length >= 1) {
                    this.$message.error("商品大图最多只能上传一张图片")
                }
            },

            //编辑菜品大图上传成功时的
            editDishesImgSuccess(){
                this.$refs.editDishesImgRule.clearValidate();
            },

            //编辑菜品详情图图上传成功时的
            editDishesDetailImgSuccess(){
                this.$refs.editDishesDetailImgRule.clearValidate();
            },



            //添加菜品详情图     上传图片成功
            addDishesImgSuccess(res, file, fileList) {
                this.$refs.addUpload1.clearValidate();
            },

            addMenuDetailImgSuccess(){
                this.$refs.addUpload2.clearValidate();
            },

            //获取列表数据
            getTableData() {
                axios({
                        method: 'get',
                        url: pageUrl + eatPackageName + "/dishesManager/queryFoodInfoDetailByParams",
                        params: {
                            pageIndex: this.pageIndex,
                            pageSize: this.pageSize,
                            codec: this.codec,
                            store: this.store
                        }
                    })
                    .then((response) => {
                        if (response.data.rows.length == 0) {
                            return
                        }
                        let data = response.data.rows;
                        data.map((val) => {
                            val.is_del == 1 ? val.is_del = "售卖中" : val.is_del = "已停售";
                        })
                        this.tableData = data;
                        this.total = response.data.total;
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            //切换页
            change(e) {
                this.pageIndex = e;
                this.getTableData();
            },

            cancel() {
                this.addDishesFlag = false;
                this.editDishesFlag = false;
            },
            back(){
                // window.location.href = `./storeMenu.html?state=${this.backData.state}&codec=${this.backData.codec}&store=${this.backData.store}`
                // window.location.href = `./storeMenu.html?state=${this.backData.state}&codec=${this.backData.codec}&store=${this.backData.store}`
                window.location.href = "./storeMenu.html"
            }
        },
        created() {
            var url = decodeURI(window.location.href.split('?')[1]);
            var str = url.substr();
            strs = str.split("&");
            let obj = {};
            for (var i = 0; i < strs.length; i++) {
                obj[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
            }
            this.codec = obj.code_c;
            this.store = obj.storeId;
            this.addData.storeId = obj.storeId;
            this.cityName = obj.codeName;
            this.storeName = obj.storeName;
            this.backData.state = obj.state;
            this.backData.codec = obj.city;
            this.backData.store = obj.store;
            this.getTableData();
        },
        watch: {
            editDishesFlag(val) {
                if (val == false) {
                    this.editData.specialPrice = "";
                    this.editData.appSpecialPrice = "";
                    this.$refs.editData.resetFields();
                    this.$refs.editDishesImg.clearFiles();
                    this.$refs.editDishesDetailImg.clearFiles();
                    // this.$refs.editData.resetFields();
                }
            },
            addDishesFlag(val) {
                if (val == false) {
                    // this.appData = {};
                    this.addData.specialPrice = "";
                    this.addData.appSpecialPrice = "";
                    this.$refs.addData.resetFields();
                    this.$refs.image.clearFiles();
                    this.$refs.addDishesUrl.clearFiles();
                }
            }
        },
    })
</script>
</html>